// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  email     String   @unique
  password  String
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jokes     Joke[]
  AuthToken AuthToken[]
}

model Joke {
  id          String     @id @default(dbgenerated("gen_random_uuid()"))
  content     String
  status      JokeStatus
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  submittedBy String

  User User @relation(fields: [submittedBy], references: [id], onDelete: Cascade)
}

model AuthToken {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  token     String   @unique
  createdAt DateTime @default(now())

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RateLimit {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  identifier String // Could be an IP address, User ID, or Token ID depending on implementation
  points     Int // Current count of the user's points (how many requests they have made)
  resetAt    DateTime // When the rate limit count resets
}

enum Role {
  ADMIN
  USER
  MODERATOR
}

enum JokeStatus {
  PENDING
  APPROVED
  REJECTED
}

